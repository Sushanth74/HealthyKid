import type { SkShader, SkPaint, SkImageFilter, SkMaskFilter, SkPathEffect, Skia, SkColorFilter } from "../skia/types";
type Composer<T> = (outer: T, inner: T) => T;
export declare const composeDeclarations: <T>(filters: T[], composer: Composer<T>) => T;
export declare const createDeclarationContext: (Skia: Skia) => {
    Skia: Skia;
    paints: {
        save: () => void;
        restore: () => void;
        pop: () => SkPaint | undefined;
        push: (decl: SkPaint) => void;
        popAll: () => SkPaint[];
        popAllAsOne: () => SkPaint | undefined;
    };
    maskFilters: {
        save: () => void;
        restore: () => void;
        pop: () => SkMaskFilter | undefined;
        push: (decl: SkMaskFilter) => void;
        popAll: () => SkMaskFilter[];
        popAllAsOne: () => SkMaskFilter | undefined;
    };
    shaders: {
        save: () => void;
        restore: () => void;
        pop: () => SkShader | undefined;
        push: (decl: SkShader) => void;
        popAll: () => SkShader[];
        popAllAsOne: () => SkShader | undefined;
    };
    pathEffects: {
        save: () => void;
        restore: () => void;
        pop: () => SkPathEffect | undefined;
        push: (decl: SkPathEffect) => void;
        popAll: () => SkPathEffect[];
        popAllAsOne: () => SkPathEffect | undefined;
    };
    imageFilters: {
        save: () => void;
        restore: () => void;
        pop: () => SkImageFilter | undefined;
        push: (decl: SkImageFilter) => void;
        popAll: () => SkImageFilter[];
        popAllAsOne: () => SkImageFilter | undefined;
    };
    colorFilters: {
        save: () => void;
        restore: () => void;
        pop: () => SkColorFilter | undefined;
        push: (decl: SkColorFilter) => void;
        popAll: () => SkColorFilter[];
        popAllAsOne: () => SkColorFilter | undefined;
    };
};
export type DeclarationContext = ReturnType<typeof createDeclarationContext>;
export {};
