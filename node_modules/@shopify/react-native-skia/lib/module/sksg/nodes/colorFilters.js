import { enumKey } from "../../dom/nodes";
import { BlendMode } from "../../skia/types";
export const composeColorFilters = (ctx, cf, processChildren) => {
  "worklet";

  const {
    Skia
  } = ctx;
  ctx.colorFilters.save();
  processChildren();
  const cf1 = ctx.colorFilters.popAllAsOne();
  ctx.colorFilters.restore();
  ctx.colorFilters.push(cf1 ? Skia.ColorFilter.MakeCompose(cf, cf1) : cf);
};
export const makeBlendColorFilter = (ctx, props) => {
  "worklet";

  const {
    mode
  } = props;
  const color = ctx.Skia.Color(props.color);
  const cf = ctx.Skia.ColorFilter.MakeBlend(color, BlendMode[enumKey(mode)]);
  return cf;
};
export const makeSRGBToLinearGammaColorFilter = ctx => {
  "worklet";

  const cf = ctx.Skia.ColorFilter.MakeSRGBToLinearGamma();
  return cf;
};
export const makeLinearToSRGBGammaColorFilter = ctx => {
  "worklet";

  const cf = ctx.Skia.ColorFilter.MakeLinearToSRGBGamma();
  return cf;
};
export const declareLerpColorFilter = (ctx, props) => {
  "worklet";

  const {
    t
  } = props;
  const second = ctx.colorFilters.pop();
  const first = ctx.colorFilters.pop();
  if (!first || !second) {
    throw new Error("LerpColorFilterNode: missing two color filters as children");
  }
  const cf = ctx.Skia.ColorFilter.MakeLerp(t, first, second);
  ctx.colorFilters.push(cf);
};
export const makeMatrixColorFilter = (ctx, props) => {
  "worklet";

  const {
    matrix
  } = props;
  const cf = ctx.Skia.ColorFilter.MakeMatrix(matrix);
  return cf;
};
export const makeLumaColorFilter = ctx => {
  "worklet";

  const cf = ctx.Skia.ColorFilter.MakeLumaColorFilter();
  return cf;
};
//# sourceMappingURL=colorFilters.js.map