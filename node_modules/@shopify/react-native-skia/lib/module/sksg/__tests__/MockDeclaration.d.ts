export declare enum DeclarationType {
    ColorFilter = 0,
    ImageFilter = 1,
    Shader = 2,
    MaskFilter = 3,
    PathEffect = 4,
    Paint = 5
}
interface Filter {
    tag: string;
}
export interface SkColorFilter extends Filter {
    type: DeclarationType.ColorFilter;
}
interface SkImageFilter extends Filter {
    type: DeclarationType.ImageFilter;
}
interface SkShader extends Filter {
    type: DeclarationType.Shader;
}
interface SkMaskFilter extends Filter {
    type: DeclarationType.MaskFilter;
}
interface SkPathEffect extends Filter {
    type: DeclarationType.PathEffect;
}
interface SkPaint extends Filter {
    type: DeclarationType.Paint;
}
type Composer<T> = (outer: T, inner: T) => T;
export declare const compose: any;
export declare const composeDeclarations: <T>(filters: T[], composer: Composer<T>) => T;
declare class Declaration<T extends Filter> {
    decls: T[];
    indexes: number[];
    composer?: Composer<T>;
    constructor(composer?: Composer<T>);
    private get index();
    save(): void;
    restore(): void;
    pop(): T | undefined;
    push(decl: T): void;
    popAll(): T[];
    popAllAsOne(): T | undefined;
}
export declare class DeclarationContext {
    readonly paints: Declaration<SkPaint>;
    readonly maskFilters: Declaration<SkMaskFilter>;
    readonly shaders: Declaration<SkShader>;
    readonly pathEffects: Declaration<SkPathEffect>;
    readonly imageFilters: Declaration<SkImageFilter>;
    readonly colorFilters: Declaration<SkColorFilter>;
    constructor();
    save(): void;
    restore(): void;
}
export {};
