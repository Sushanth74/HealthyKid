{"version":3,"names":["enumKey","isPathDef","processPath","processTransformProps2","BlendMode","ClipOp","isRRect","PaintStyle","StrokeCap","StrokeJoin","computeClip","Skia","clip","clipPath","clipRRect","clipRect","undefined","processColor","color","Color","Array","isArray","Float32Array","Error","createDrawingContext","canvas","state","paints","Paint","getPaint","length","processPaint","opacity","strokeWidth","blendMode","style","strokeJoin","strokeCap","strokeMiter","antiAlias","dither","paint","paintProp","declCtx","push","shouldRestore","colorFilter","colorFilters","popAllAsOne","imageFilter","imageFilters","shader","shaders","pop","maskFilter","maskFilters","pathEffect","pathEffects","copy","setAlphaf","getAlphaf","currentOpacity","setShader","setColor","setStrokeWidth","setBlendMode","setStyle","setStrokeJoin","setStrokeCap","setStrokeMiter","setAntiAlias","setDither","setColorFilter","setImageFilter","setMaskFilter","setPathEffect","processMatrixAndClipping","props","layer","hasTransform","matrix","transform","hasClip","op","invertClip","Difference","Intersect","m3","shouldSave","saveLayer","save","concat","restore"],"sources":["DrawingContext.ts"],"sourcesContent":["import {\n  enumKey,\n  isPathDef,\n  processPath,\n  processTransformProps2,\n} from \"../dom/nodes\";\nimport type { ClipDef, DrawingNodeProps, GroupProps } from \"../dom/types\";\nimport {\n  BlendMode,\n  ClipOp,\n  isRRect,\n  PaintStyle,\n  StrokeCap,\n  StrokeJoin,\n} from \"../skia/types\";\nimport type {\n  SkPath,\n  SkRect,\n  SkRRect,\n  SkCanvas,\n  Skia,\n  SkPaint,\n} from \"../skia/types\";\n\nimport type { DeclarationContext } from \"./DeclarationContext\";\n\nconst computeClip = (\n  Skia: Skia,\n  clip: ClipDef | undefined\n):\n  | undefined\n  | { clipPath: SkPath }\n  | { clipRect: SkRect }\n  | { clipRRect: SkRRect } => {\n  \"worklet\";\n  if (clip) {\n    if (isPathDef(clip)) {\n      return { clipPath: processPath(Skia, clip) };\n    } else if (isRRect(clip)) {\n      return { clipRRect: clip };\n    } else {\n      return { clipRect: clip };\n    }\n  }\n  return undefined;\n};\n\nconst processColor = (\n  Skia: Skia,\n  color: number | string | Float32Array | number[]\n) => {\n  \"worklet\";\n  if (typeof color === \"string\" || typeof color === \"number\") {\n    return Skia.Color(color);\n  } else if (Array.isArray(color) || color instanceof Float32Array) {\n    return color instanceof Float32Array ? color : new Float32Array(color);\n  } else {\n    throw new Error(\n      `Invalid color type: ${typeof color}. Expected number, string, or array.`\n    );\n  }\n};\n\nexport const createDrawingContext = (Skia: Skia, canvas: SkCanvas) => {\n  \"worklet\";\n  const state = {\n    paints: [Skia.Paint()],\n  };\n\n  const getPaint = () => {\n    return state.paints[state.paints.length - 1];\n  };\n\n  const processPaint = (\n    {\n      opacity,\n      color,\n      strokeWidth,\n      blendMode,\n      style,\n      strokeJoin,\n      strokeCap,\n      strokeMiter,\n      antiAlias,\n      dither,\n      paint: paintProp,\n    }: DrawingNodeProps,\n    declCtx: DeclarationContext\n  ) => {\n    if (paintProp) {\n      declCtx.paints.push(paintProp);\n      return true;\n    }\n    let shouldRestore = false;\n    const colorFilter = declCtx.colorFilters.popAllAsOne();\n    const imageFilter = declCtx.imageFilters.popAllAsOne();\n    const shader = declCtx.shaders.pop();\n    const maskFilter = declCtx.maskFilters.pop();\n    const pathEffect = declCtx.pathEffects.popAllAsOne();\n\n    if (\n      opacity !== undefined ||\n      color !== undefined ||\n      strokeWidth !== undefined ||\n      blendMode !== undefined ||\n      style !== undefined ||\n      strokeJoin !== undefined ||\n      strokeCap !== undefined ||\n      strokeMiter !== undefined ||\n      antiAlias !== undefined ||\n      dither !== undefined ||\n      colorFilter !== undefined ||\n      imageFilter !== undefined ||\n      shader !== undefined ||\n      maskFilter !== undefined ||\n      pathEffect !== undefined\n    ) {\n      if (!shouldRestore) {\n        state.paints.push(getPaint().copy());\n        shouldRestore = true;\n      }\n    }\n\n    const paint = getPaint();\n    if (opacity !== undefined) {\n      paint.setAlphaf(paint.getAlphaf() * opacity);\n    }\n    if (color !== undefined) {\n      const currentOpacity = paint.getAlphaf();\n      paint.setShader(null);\n      paint.setColor(processColor(Skia, color));\n      paint.setAlphaf(currentOpacity * paint.getAlphaf());\n    }\n    if (strokeWidth !== undefined) {\n      paint.setStrokeWidth(strokeWidth);\n    }\n    if (blendMode !== undefined) {\n      paint.setBlendMode(BlendMode[enumKey(blendMode)]);\n    }\n    if (style !== undefined) {\n      paint.setStyle(PaintStyle[enumKey(style)]);\n    }\n    if (strokeJoin !== undefined) {\n      paint.setStrokeJoin(StrokeJoin[enumKey(strokeJoin)]);\n    }\n    if (strokeCap !== undefined) {\n      paint.setStrokeCap(StrokeCap[enumKey(strokeCap)]);\n    }\n    if (strokeMiter !== undefined) {\n      paint.setStrokeMiter(strokeMiter);\n    }\n    if (antiAlias !== undefined) {\n      paint.setAntiAlias(antiAlias);\n    }\n    if (dither !== undefined) {\n      paint.setDither(dither);\n    }\n    if (colorFilter) {\n      paint.setColorFilter(colorFilter);\n    }\n    if (imageFilter) {\n      paint.setImageFilter(imageFilter);\n    }\n    if (shader) {\n      paint.setShader(shader);\n    }\n    if (maskFilter) {\n      paint.setMaskFilter(maskFilter);\n    }\n    if (pathEffect) {\n      paint.setPathEffect(pathEffect);\n    }\n    return shouldRestore;\n  };\n\n  const processMatrixAndClipping = (\n    props: GroupProps,\n    layer?: boolean | SkPaint\n  ) => {\n    const hasTransform =\n      props.matrix !== undefined || props.transform !== undefined;\n    const clip = computeClip(Skia, props.clip);\n    const hasClip = clip !== undefined;\n    const op = props.invertClip ? ClipOp.Difference : ClipOp.Intersect;\n    const m3 = processTransformProps2(Skia, props);\n    const shouldSave = hasTransform || hasClip || !!layer;\n\n    if (shouldSave) {\n      if (layer) {\n        if (typeof layer === \"boolean\") {\n          canvas.saveLayer();\n        } else {\n          canvas.saveLayer(layer);\n        }\n      } else {\n        canvas.save();\n      }\n    }\n\n    if (m3) {\n      canvas.concat(m3);\n    }\n    if (clip) {\n      if (\"clipRect\" in clip) {\n        canvas.clipRect(clip.clipRect, op, true);\n      } else if (\"clipRRect\" in clip) {\n        canvas.clipRRect(clip.clipRRect, op, true);\n      } else {\n        canvas.clipPath(clip.clipPath, op, true);\n      }\n    }\n    return shouldSave;\n  };\n\n  return {\n    Skia,\n    canvas,\n    save: () => state.paints.push(getPaint().copy()),\n    restore: () => state.paints.pop(),\n    getPaint,\n    processPaint,\n    processMatrixAndClipping,\n  };\n};\n\nexport type DrawingContext = ReturnType<typeof createDrawingContext>;\n"],"mappings":"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","ignoreList":[]}