export const composeDeclarations = (filters, composer) => {
  "worklet";

  const len = filters.length;
  if (len <= 1) {
    return filters[0];
  }
  return filters.reduceRight((inner, outer) => inner ? composer(outer, inner) : outer);
};
const createDeclaration = composer => {
  "worklet";

  const state = {
    decls: [],
    indexes: [0]
  };
  return {
    save: () => {
      state.indexes.push(state.decls.length);
    },
    restore: () => {
      state.indexes.pop();
    },
    pop: () => state.decls.pop(),
    push: decl => {
      state.decls.push(decl);
    },
    popAll: () => {
      const idx = state.indexes[state.indexes.length - 1];
      return state.decls.splice(idx, state.decls.length - idx);
    },
    popAllAsOne: () => {
      if (state.decls.length === 0) {
        return undefined;
      }
      if (!composer) {
        throw new Error("No composer for this type of declaration");
      }
      if (!state.decls.length) {
        return undefined;
      }
      if (!composer) {
        throw new Error("No composer for this type of declaration");
      }
      const idx = state.indexes[state.indexes.length - 1];
      const decls = state.decls.splice(idx, state.decls.length - idx);
      return composeDeclarations(decls, composer);
    }
  };
};
export const createDeclarationContext = Skia => {
  "worklet";

  const composers = {
    pathEffect: Skia.PathEffect.MakeCompose.bind(Skia.PathEffect),
    imageFilter: Skia.ImageFilter.MakeCompose.bind(Skia.ImageFilter),
    colorFilter: Skia.ColorFilter.MakeCompose.bind(Skia.ColorFilter)
  };
  return {
    Skia,
    paints: createDeclaration(),
    maskFilters: createDeclaration(),
    shaders: createDeclaration(),
    pathEffects: createDeclaration(composers.pathEffect),
    imageFilters: createDeclaration(composers.imageFilter),
    colorFilters: createDeclaration(composers.colorFilter)
  };
};
//# sourceMappingURL=DeclarationContext.js.map