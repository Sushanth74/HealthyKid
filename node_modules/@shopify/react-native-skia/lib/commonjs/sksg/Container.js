"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Container = void 0;
var _ReanimatedProxy = _interopRequireDefault(require("../external/reanimated/ReanimatedProxy"));
var _renderHelpers = require("../external/reanimated/renderHelpers");
var _DrawingContext = require("./DrawingContext");
var _nodes = require("./nodes");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const drawOnscreen = (Skia, nativeId, root) => {
  "worklet";

  const rec = Skia.PictureRecorder();
  const canvas = rec.beginRecording();
  // TODO: This is only support from 3.15 and above (check the exact version)
  // This could be polyfilled in C++ if needed (or in JS via functions only?)
  const ctx = (0, _DrawingContext.createDrawingContext)(Skia, canvas);
  root.forEach(node => {
    (0, _nodes.draw)(ctx, node);
  });
  const picture = rec.finishRecordingAsPicture();
  SkiaViewApi.setJsiProperty(nativeId, "picture", picture);
};
class Container {
  constructor(Skia, nativeId) {
    this.Skia = Skia;
    this.nativeId = nativeId;
    _defineProperty(this, "_root", []);
    _defineProperty(this, "unmounted", false);
    _defineProperty(this, "values", new Set());
    _defineProperty(this, "mapperId", null);
  }
  get root() {
    return this._root;
  }
  set root(root) {
    const isOnscreen = this.nativeId !== -1;
    if (_renderHelpers.HAS_REANIMATED && !_renderHelpers.HAS_REANIMATED_3) {
      throw new Error("React Native Skia only supports Reanimated 3 and above");
    }
    if (isOnscreen) {
      if (this.mapperId !== null) {
        _ReanimatedProxy.default.stopMapper(this.mapperId);
      }
      const {
        nativeId,
        Skia
      } = this;
      this.mapperId = _ReanimatedProxy.default.startMapper(() => {
        "worklet";

        drawOnscreen(Skia, nativeId, root);
      }, Array.from(this.values));
    }
    this._root = root;
  }
  clear() {
    console.log("clear container");
  }
  redraw() {
    const isOnscreen = this.nativeId !== -1;
    if (_renderHelpers.HAS_REANIMATED && !_renderHelpers.HAS_REANIMATED_3) {
      throw new Error("React Native Skia only supports Reanimated 3 and above");
    }
    if (isOnscreen) {
      const {
        nativeId,
        Skia,
        root
      } = this;
      _ReanimatedProxy.default.runOnUI(() => {
        drawOnscreen(Skia, nativeId, root);
      })();
    }
  }
  getNativeId() {
    return this.nativeId;
  }
  unregisterValues(values) {
    Object.values(values).filter(_nodes.isSharedValue).forEach(value => {
      this.values.delete(value);
    });
  }
  registerValues(values) {
    Object.values(values).filter(_nodes.isSharedValue).forEach(value => {
      this.values.add(value);
    });
  }
  drawOnCanvas(canvas) {
    const ctx = (0, _DrawingContext.createDrawingContext)(this.Skia, canvas);
    this.root.forEach(node => {
      (0, _nodes.draw)(ctx, node);
    });
  }
}
exports.Container = Container;
//# sourceMappingURL=Container.js.map