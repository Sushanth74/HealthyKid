"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeSRGBToLinearGammaColorFilter = exports.makeMatrixColorFilter = exports.makeLumaColorFilter = exports.makeLinearToSRGBGammaColorFilter = exports.makeBlendColorFilter = exports.declareLerpColorFilter = exports.composeColorFilters = void 0;
var _nodes = require("../../dom/nodes");
var _types = require("../../skia/types");
const composeColorFilters = (ctx, cf, processChildren) => {
  "worklet";

  const {
    Skia
  } = ctx;
  ctx.colorFilters.save();
  processChildren();
  const cf1 = ctx.colorFilters.popAllAsOne();
  ctx.colorFilters.restore();
  ctx.colorFilters.push(cf1 ? Skia.ColorFilter.MakeCompose(cf, cf1) : cf);
};
exports.composeColorFilters = composeColorFilters;
const makeBlendColorFilter = (ctx, props) => {
  "worklet";

  const {
    mode
  } = props;
  const color = ctx.Skia.Color(props.color);
  const cf = ctx.Skia.ColorFilter.MakeBlend(color, _types.BlendMode[(0, _nodes.enumKey)(mode)]);
  return cf;
};
exports.makeBlendColorFilter = makeBlendColorFilter;
const makeSRGBToLinearGammaColorFilter = ctx => {
  "worklet";

  const cf = ctx.Skia.ColorFilter.MakeSRGBToLinearGamma();
  return cf;
};
exports.makeSRGBToLinearGammaColorFilter = makeSRGBToLinearGammaColorFilter;
const makeLinearToSRGBGammaColorFilter = ctx => {
  "worklet";

  const cf = ctx.Skia.ColorFilter.MakeLinearToSRGBGamma();
  return cf;
};
exports.makeLinearToSRGBGammaColorFilter = makeLinearToSRGBGammaColorFilter;
const declareLerpColorFilter = (ctx, props) => {
  "worklet";

  const {
    t
  } = props;
  const second = ctx.colorFilters.pop();
  const first = ctx.colorFilters.pop();
  if (!first || !second) {
    throw new Error("LerpColorFilterNode: missing two color filters as children");
  }
  const cf = ctx.Skia.ColorFilter.MakeLerp(t, first, second);
  ctx.colorFilters.push(cf);
};
exports.declareLerpColorFilter = declareLerpColorFilter;
const makeMatrixColorFilter = (ctx, props) => {
  "worklet";

  const {
    matrix
  } = props;
  const cf = ctx.Skia.ColorFilter.MakeMatrix(matrix);
  return cf;
};
exports.makeMatrixColorFilter = makeMatrixColorFilter;
const makeLumaColorFilter = ctx => {
  "worklet";

  const cf = ctx.Skia.ColorFilter.MakeLumaColorFilter();
  return cf;
};
exports.makeLumaColorFilter = makeLumaColorFilter;
//# sourceMappingURL=colorFilters.js.map