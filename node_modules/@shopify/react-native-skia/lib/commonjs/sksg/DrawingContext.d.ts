import type { DrawingNodeProps, GroupProps } from "../dom/types";
import type { SkCanvas, Skia, SkPaint } from "../skia/types";
import type { DeclarationContext } from "./DeclarationContext";
export declare const createDrawingContext: (Skia: Skia, canvas: SkCanvas) => {
    Skia: Skia;
    canvas: SkCanvas;
    save: () => number;
    restore: () => SkPaint | undefined;
    getPaint: () => SkPaint;
    processPaint: ({ opacity, color, strokeWidth, blendMode, style, strokeJoin, strokeCap, strokeMiter, antiAlias, dither, paint: paintProp, }: DrawingNodeProps, declCtx: DeclarationContext) => boolean;
    processMatrixAndClipping: (props: GroupProps, layer?: boolean | SkPaint) => boolean;
};
export type DrawingContext = ReturnType<typeof createDrawingContext>;
